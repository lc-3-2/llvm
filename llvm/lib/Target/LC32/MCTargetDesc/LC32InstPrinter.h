//= LC32InstPrinter.h - Print LC-3.2 MCInst in Assembly Syntax -----*- C++ -*-//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This module takes an MCInst as input and writes its disassembly to output.
// The main method responsible for this is `printInst`. However, most of the
// heavy lifting is done by TableGen.
//
// See: LC32GenAsmWriter.inc
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_LC32_MCTARGETDESC_LC32INSTPRINTER_H
#define LLVM_LIB_TARGET_LC32_MCTARGETDESC_LC32INSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"

namespace llvm {

class LC32InstPrinter : public MCInstPrinter {
public:
  LC32InstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                  const MCRegisterInfo &MRI);

  // Print a single instruction to the output stream
  // This function mostly calls into TableGen, but it has some special handling
  // to deal with pseudo-instructions.
  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &OS) override;

private:
  // Generated by TableGen
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  const char *getRegisterName(MCRegister Reg);
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &OS);
  bool printAliasInstr(const MCInst *MI, uint64_t Address, raw_ostream &OS);
  void printCustomAliasOperand(const MCInst *MI, uint64_t Address,
                               unsigned OpIdx, unsigned PrintMethodIdx,
                               raw_ostream &OS);

  // Prints an MCOperand from an MCInst
  // Generic method that TableGen will call for most operands.
  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                    const char *Modifier = nullptr);
  // Specialized operand handling
  // We requested these from TableGen
  template <unsigned N, unsigned S>
  void printShiftedSignedImmOperand(const MCInst *MI, unsigned OpNo,
                                    raw_ostream &O,
                                    const char *Modifier = nullptr);
  template <unsigned N>
  void printPCOffset(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                     const char *Modifier = nullptr);
};

} // namespace llvm

#endif // LLVM_LIB_TARGET_LC32_MCTARGETDESC_LC32INSTPRINTER_H
